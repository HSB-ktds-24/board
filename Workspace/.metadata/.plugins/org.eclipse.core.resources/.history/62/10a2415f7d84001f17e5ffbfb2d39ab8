package com.ktdsuniversity.edu.hello_spring.member.web;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ktdsuniversity.edu.hello_spring.member.service.MemberService;
import com.ktdsuniversity.edu.hello_spring.member.vo.LoginMemberVO;
import com.ktdsuniversity.edu.hello_spring.member.vo.MemberVO;
import com.ktdsuniversity.edu.hello_spring.member.vo.MemberWriteVO;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;


@Controller
public class MemberController {

	@Autowired
	private MemberService memberService;
	
	@GetMapping("/member/regist")
	public String viewRegistMemberPage() {
		return "member/memberregist";
	}
	
	@PostMapping("/member/regist")
	public String doCreateNewMember(MemberWriteVO memberWriteVO, Model model){
		
		boolean isCreated = this.memberService.createNewMember(memberWriteVO);
		String result = isCreated?"회원이 등록되었습니다.":"회원 등록에 실패하였습니다.";
		System.out.println(result);
		model.addAttribute(memberWriteVO);
		return "redirect:/member/login";
	}
	
	@ResponseBody
	@GetMapping("/member/regist/available")
	public Map<String, Object> doCheckAvailableEmail(@RequestParam String email){
		boolean isAvailableEmail = this.memberService.checkAvailableEamil(email);
		
		Map<String,Object> response = new HashMap<String, Object>();
		response.put("email",email);
		response.put("available",isAvailableEmail);
		return response;
	}

	@GetMapping("/member/login")
	public String viewLogin(  ) {
		return "member/memberlogin";
	}
	
	@PostMapping("/member/login")
	public String doLogin(@Valid LoginMemberVO loginMemberVO, BindingResult bindingResult , HttpSession session ,Model model ) {
		
		if(bindingResult.hasErrors()) {
			model.addAttribute("loginMemberVO", loginMemberVO);
			return "member/memberlogin";
		}
		
		try {
			MemberVO memberVO = this.memberService.readMember(loginMemberVO);
			session.setAttribute("_LOGIN_USER_", memberVO);} 
		catch(IllegalArgumentException e){
			model.addAttribute(loginMemberVO);
			model.addAttribute(e.getMessage());
			return "member/memberlogin";
		}
		
		return "redirect:/board/list";
	}
	
}
